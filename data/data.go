package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _resources_ddl_agencies_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\xcf\x4a\xc4\x30\x10\x06\xf0\x7b\x9f\x62\x2e\x42\x0b\xe2\x69\x05\x41\xf6\x90\xdd\x1d\x35\x98\xc6\x25\x9b\x1e\xf6\x94\xc4\x26\xad\x85\x36\x95\x34\x15\xf4\xe9\xfd\x07\xb5\xe2\xc1\xb2\xb7\x04\x7e\xdf\x37\xcc\x6c\x05\x12\x89\x20\xc9\x86\x21\xe8\x3a\x56\x83\x3a\x1b\xf4\x85\x36\xb5\xf3\x65\xe3\x06\x0d\x69\x02\xf0\xfd\x7d\x55\x8d\xd5\xf0\x62\x42\xf9\x64\x42\xba\xba\xcc\x80\x3f\x48\xe0\x05\x63\xe7\x33\xe3\x4d\xe7\x7e\xab\x1d\xde\x90\x82\xfd\x95\x63\x68\x97\xc1\xd8\x74\xee\xad\xf7\x0b\x6b\x5b\xe3\xeb\x7f\x64\x19\x9c\x89\xce\x2a\x13\x35\xd8\x8f\xd7\xe7\x80\x69\x99\x89\x6f\x0b\x21\x90\x4b\x25\x69\x8e\x07\x49\xf2\xfd\x57\x76\x7c\xb6\xa7\x66\xf7\x82\xe6\x44\x1c\xe1\x1e\x8f\x90\xce\x6e\x9a\x25\x19\x20\xbf\xa5\x1c\xd7\xd4\xfb\x7e\xb7\xf9\xa9\xb9\x23\xe2\x80\x72\x3d\xc6\xea\xaa\x7b\x5c\x5d\x27\xef\x01\x00\x00\xff\xff\x99\xf3\x0c\x35\xb0\x01\x00\x00")

func resources_ddl_agencies_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_agencies_sql,
		"resources/ddl/agencies.sql",
	)
}

func resources_ddl_agencies_sql() (*asset, error) {
	bytes, err := resources_ddl_agencies_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/agencies.sql", size: 432, mode: os.FileMode(420), modTime: time.Unix(1419430954, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_calendar_dates_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\x41\x4b\x03\x31\x10\x46\xef\xfb\x2b\xe6\x22\xec\x42\x11\x0a\x1e\x04\xe9\x21\x6d\x47\x5d\xdc\x8d\x25\xcd\x1e\x7a\x4a\x62\x32\x95\x80\x4d\x97\xcd\x54\xf4\xdf\xeb\xaa\xb8\xf5\xea\x65\x0e\xc3\x7b\x0f\xbe\x95\x42\xa1\x11\xb4\x58\x36\x08\xf6\x99\xf7\xd9\x5c\x64\x7b\x69\xbd\x7b\xa1\x14\xdc\x60\x82\x63\xca\x16\xca\x02\xc0\x66\x1a\x5e\xa3\x27\x13\x83\x85\x98\xb8\x9c\xcf\x2b\x90\x8f\x1a\x64\xd7\x34\xb3\x11\x18\x61\x0b\xe3\xfd\xfb\xa7\x37\x4f\x3d\xc7\x63\x32\xfc\xde\xd3\x24\xaf\xf1\x56\x74\xcd\x19\xe8\x07\xfa\x94\x83\x71\xfc\x9d\xe1\x78\x98\x52\xbf\xf8\xaa\x53\x0a\xa5\x36\xba\x6e\x71\xab\x45\xbb\xf9\x72\x4f\x7d\xf8\xaf\xbb\x51\x75\x2b\xd4\x0e\x1e\x70\x07\xe5\xf9\xcc\xd9\xcf\xa6\xaa\xa8\x00\xe5\x5d\x2d\x71\x51\xa7\x74\x5c\x2f\xa7\xde\xbd\x50\x5b\xd4\x8b\x13\xef\xaf\x0f\x4f\x57\x37\xc5\x47\x00\x00\x00\xff\xff\x18\xbc\xd9\x3f\x52\x01\x00\x00")

func resources_ddl_calendar_dates_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_calendar_dates_sql,
		"resources/ddl/calendar_dates.sql",
	)
}

func resources_ddl_calendar_dates_sql() (*asset, error) {
	bytes, err := resources_ddl_calendar_dates_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/calendar_dates.sql", size: 338, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_calendars_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4d\x4b\xc3\x40\x10\x86\xef\xfd\x15\x73\x11\x12\x10\x41\xa8\x20\x48\x0f\x69\xbb\x6a\x30\x8d\x25\xdd\x1e\x7a\xca\xae\xc9\xd6\x06\x6c\x2a\xbb\xb3\xd5\xfe\x7b\x13\xbb\x5f\x20\x18\xf1\x92\xc3\xbc\xcf\x2c\xbc\x93\x67\x56\x90\x84\x12\xa0\xc9\x34\x23\xc0\x5e\x71\xab\xca\x0b\xc5\xae\x58\xc5\xdf\x44\x5b\x73\xa9\x18\x44\x23\x00\xa6\x84\x3c\x36\x95\x28\x9b\x9a\xc1\x91\xcb\x6a\xc7\x65\x34\xbe\x89\x21\x7f\xa6\x90\xaf\xb3\xec\xb2\x87\xf6\x87\x6e\xe5\xc4\x00\x9b\xf6\xd4\xb4\x18\x5d\xc7\x30\x27\xf7\xc9\x3a\x0b\x18\xd4\x42\x0d\x42\x1f\xa2\x6e\xff\x80\xe1\x4e\xcb\x61\x6a\x2b\x9b\x41\x46\x71\xd4\x72\x98\xd2\xc3\xfd\x14\x72\x89\x65\xcd\x51\x30\xe8\xbf\x3f\x89\xee\xae\xbf\xe6\x95\x14\xdd\xbc\x2e\x39\x9e\x09\x6c\xf6\xc2\xdd\xd9\xe1\xb3\x75\x51\x90\x9c\x96\x34\x5d\x90\x15\x4d\x16\xcb\xef\x5d\xfd\x5e\xff\x77\x77\x59\xa4\x8b\xa4\xd8\xc0\x13\xd9\x40\x14\xfe\xef\xb8\x4f\xfb\x69\xd0\xad\x9b\x7f\xb2\x1e\xf3\x6d\x3d\x66\x0b\x5a\xc8\x15\xf6\xc8\xd9\x14\x0b\x18\x6f\x7c\x6c\x24\xb1\xb9\x75\xc6\x03\x4e\x10\x8b\x78\x63\x82\x57\x8c\x1e\xee\x19\xab\x8b\x47\xce\x6e\x58\xc0\x98\x12\x14\x36\x5a\xb8\xba\x56\x93\x00\xd1\x61\x13\x63\x48\x3c\x8a\x81\xe4\x0f\x69\x4e\x26\x69\xdb\x1e\xe6\x53\x7f\xfa\xc7\xa4\x58\x11\x3a\xd1\xb8\xbd\xdd\xbf\x8c\xef\x46\x5f\x01\x00\x00\xff\xff\x58\x7a\xd7\x5a\x81\x03\x00\x00")

func resources_ddl_calendars_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_calendars_sql,
		"resources/ddl/calendars.sql",
	)
}

func resources_ddl_calendars_sql() (*asset, error) {
	bytes, err := resources_ddl_calendars_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/calendars.sql", size: 897, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_routes_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd1\xc1\x4b\xfb\x30\x14\xc0\xf1\x7b\xff\x8a\x77\xf9\x41\x0b\x3f\x84\xca\x84\x81\xec\x90\x6d\x4f\x2d\xb6\x75\x64\xe9\x61\xa7\x26\xb6\x59\x57\x68\x93\x91\xbe\x8a\xfb\xef\x9d\x0e\x36\x51\x06\xc1\x5b\x02\x9f\xf7\x0d\xe4\x2d\x38\x32\x81\x20\xd8\x3c\x45\x90\x0d\x6d\x87\xf2\xdf\x20\x6f\xa4\xb3\x23\xe9\x41\x42\x18\x00\x9c\x2e\x65\x5b\x4b\x78\x53\xae\xda\x29\x17\x4e\xee\x22\xc8\x5f\x04\xe4\x45\x9a\xfe\xff\x24\xaa\xd1\xa6\x3a\xfc\x32\x4b\x7c\x60\x45\xfa\xcd\x9d\x52\xc3\xce\x3a\x2a\x8d\xea\xb5\x17\xef\xac\x69\x7e\xe8\xf8\x76\x7a\x95\xd7\x7a\xa8\xbc\xba\x74\xd8\x1f\x93\xad\xa1\x30\x8e\xaf\xa2\xd1\x75\x5e\xb1\xca\x76\xd6\xf9\x3d\xab\xdf\xc9\x8b\x57\x4e\x2b\xd2\x75\xa9\x48\x42\x7d\x3c\x51\xdb\xeb\xf3\xb7\x9f\xf9\xa2\xe0\x1c\x73\x51\x8a\x24\xc3\xb5\x60\xd9\xea\x6b\x76\xdc\xd7\x7f\x9d\x5d\xf1\x24\x63\x7c\x03\xcf\xb8\x81\xf0\xb2\xfc\x28\x88\x00\xf3\xc7\x24\xc7\x59\x62\x8c\x5d\xce\x2f\x95\x27\xc6\xd7\x28\x66\x23\x6d\xa7\xfd\xeb\xe4\x3e\xf8\x08\x00\x00\xff\xff\x79\xe3\x83\xbe\x56\x02\x00\x00")

func resources_ddl_routes_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_routes_sql,
		"resources/ddl/routes.sql",
	)
}

func resources_ddl_routes_sql() (*asset, error) {
	bytes, err := resources_ddl_routes_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/routes.sql", size: 598, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stop_times_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\x4f\x4b\xc3\x30\x18\xc6\xef\xfd\x14\xef\x45\x68\x41\xc4\xe9\x0e\x03\xd9\x21\xdb\xa2\x16\xba\x28\x5d\x7a\x4e\x62\x93\x6e\x41\x97\xc6\xfc\x19\xf8\xed\xed\x02\xba\x21\x3a\x61\x97\x97\xf7\xf0\x7b\x7e\x0f\xcf\xbc\xc6\x88\x62\xa0\x68\x56\x61\xe0\xeb\xd0\x79\x76\xe1\xf9\x15\xf7\xa1\xb7\x2c\xe8\xad\xf2\x1c\xf2\x0c\x80\x07\xa7\x2d\xd3\x92\xc3\x4e\xb8\x76\x23\x5c\x3e\xbe\x2e\x80\x3c\x51\x20\x4d\x55\x5d\xee\x09\xe1\x9c\xde\x89\xb7\x94\xe2\xb0\xbf\xb0\xc0\xf7\xa8\xa9\x8e\x18\xa9\xac\x70\x21\x3a\x75\x92\x4a\xe5\xc7\x5d\xb7\x37\x3f\xba\x12\xe1\xd5\x7b\x54\xa6\x1d\x34\xda\x84\x7c\x34\x2a\xfe\x30\x6d\x94\x90\xcc\xeb\xb5\x39\x08\x27\xbf\xb0\x56\xb7\xaf\x71\x18\xfd\x61\x4f\x19\xa5\x1b\x8c\x7d\xd7\xfd\xc7\xb5\x4e\x89\xa0\x24\x13\x81\x83\x1c\xbe\xb4\xf4\x6b\xc3\x37\x3e\x6f\xea\x1a\x13\xca\x68\xb9\xc4\x2b\x8a\x96\xcf\x29\x1b\xad\x3c\x27\x9b\x15\x80\xc9\x43\x49\xf0\xb4\x34\xa6\x5f\xcc\x0e\xe4\x23\xaa\x57\x98\x4e\x63\xe8\x26\xdb\x97\xf1\x5d\xf6\x19\x00\x00\xff\xff\x64\xbd\x06\x05\xf6\x01\x00\x00")

func resources_ddl_stop_times_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stop_times_sql,
		"resources/ddl/stop_times.sql",
	)
}

func resources_ddl_stop_times_sql() (*asset, error) {
	bytes, err := resources_ddl_stop_times_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stop_times.sql", size: 502, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stop_times_indexes_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x48\x2f\x49\x2b\x8e\x57\x2d\x4e\xd0\x4b\x28\x2e\xc9\x2f\x88\x2f\xc9\xcc\x4d\x2d\x4e\x50\x70\x74\x71\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\x54\xd0\x48\x28\x29\xca\x2c\x88\xcf\x4c\x49\xd0\x51\x80\x28\x04\x32\x35\xad\xb9\x00\x01\x00\x00\xff\xff\xcb\xc3\xaa\x3a\x4b\x00\x00\x00")

func resources_ddl_stop_times_indexes_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stop_times_indexes_sql,
		"resources/ddl/stop_times_indexes.sql",
	)
}

func resources_ddl_stop_times_indexes_sql() (*asset, error) {
	bytes, err := resources_ddl_stop_times_indexes_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stop_times_indexes.sql", size: 75, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stops_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd2\xbf\x6a\xf3\x30\x14\x05\xf0\x3d\x4f\x71\x97\x0f\x1c\xf8\x28\xb8\xb8\x25\x50\x32\x28\x89\xd2\x9a\xda\x4e\x50\xe4\x21\x93\xa4\x5a\x4a\x6b\xb0\x25\x63\x5d\x17\xda\xa7\x6f\xea\xc1\xe9\x9f\x98\x40\xb7\x3b\xfc\xce\x81\x23\xb4\x64\x94\x70\x0a\x9c\x2c\x12\x0a\xf2\x19\x0f\x5e\xfc\xf3\xf2\x4a\x7a\x74\x8d\x97\x10\x4c\x00\xfa\x5b\x94\x5a\xc2\xab\x6a\x8b\x17\xd5\x06\xd1\xcd\x14\xb2\x0d\x87\x2c\x4f\x92\xff\x83\x28\x9c\x36\xdf\xcd\x8a\xae\x49\x9e\xfc\x74\x56\xd5\x5f\xdc\x6d\x34\xe6\xb4\xf1\xc5\xc9\x85\xd7\xb3\x31\x58\x29\x94\xb0\x4e\x36\x84\x8f\x01\x67\x47\xc1\xbb\xb3\xe6\xd7\xb8\xf3\x35\x5d\x5b\x5d\x60\x95\x2b\x14\x96\xce\x0a\x7c\x6b\x8e\x1b\x4b\x8b\x41\x18\x9e\x71\x8d\x6a\x8d\x45\xe1\xb1\xd7\x17\x4a\x8b\xd6\x28\x34\x5a\x7c\xae\xd4\xc7\x0b\xcb\xda\x0c\xcf\x3f\xf0\x65\xce\x18\xcd\xb8\xe0\x71\x4a\x77\x9c\xa4\xdb\x3e\xdb\x35\xfa\xaf\xd9\x2d\x8b\x53\xc2\xf6\xf0\x48\xf7\x10\x0c\x7f\x60\x3a\x99\x02\xcd\xee\xe3\x8c\xce\x63\x6b\xdd\x6a\x71\x2a\x79\x20\x6c\x47\xf9\xbc\xc3\xc3\xac\x7e\x8a\xee\x26\x1f\x01\x00\x00\xff\xff\x66\x39\x06\x72\x5b\x02\x00\x00")

func resources_ddl_stops_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stops_sql,
		"resources/ddl/stops.sql",
	)
}

func resources_ddl_stops_sql() (*asset, error) {
	bytes, err := resources_ddl_stops_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stops.sql", size: 603, mode: os.FileMode(420), modTime: time.Unix(1419989291, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_transfers_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x4f\x4b\xc3\x30\x18\x87\xef\xfd\x14\xef\x45\x96\x42\x11\x07\x13\x04\xd9\x21\xdb\x5e\xb5\x58\x33\xa9\x19\xb2\x53\x12\xd7\x56\x73\x48\x52\x92\x77\x82\xdf\x5e\xfc\xb7\x56\xf1\xa0\xf7\xe7\x79\x92\xf7\xb7\xac\x91\x4b\x04\xc9\x17\x15\x82\x7e\xa4\x2e\xa9\xa3\xa4\x8f\x35\x45\xe3\x53\xd7\xc6\xa4\x81\x65\x00\xba\x8b\xc1\xa9\x44\xa1\x57\xb6\xd1\xf0\x6c\xe2\xee\xc9\x44\x36\x3b\xcd\x41\xac\x25\x88\x4d\x55\x15\x6f\x18\x85\xbf\x40\x9f\x6d\x45\x2f\x7d\xab\xc1\x7a\x62\xd3\xe9\xc0\xc0\x0a\x2f\xf8\xa6\x92\x30\x39\x99\xbc\xf3\xce\x7a\x35\x38\xd6\x8d\x9c\x2f\xf4\xd0\xde\xc5\xd6\x50\xdb\x28\x43\xbf\x7f\x60\x88\x8b\xf5\x3d\xcb\x3f\x1e\xd8\xf7\xcd\xbf\xa5\xdb\xba\xbc\xe1\xf5\x16\xae\x71\x0b\xec\xfb\x3c\xc5\x78\x86\xe2\xc7\xb9\x79\x96\x03\x8a\xcb\x52\xe0\xbc\xf4\x3e\xac\x16\x87\xf8\xf2\x8a\xd7\x77\x28\xe7\x7b\xea\xce\xdc\xc3\xec\x3c\x7b\x0d\x00\x00\xff\xff\x7f\xcc\x9c\xad\x9c\x01\x00\x00")

func resources_ddl_transfers_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_transfers_sql,
		"resources/ddl/transfers.sql",
	)
}

func resources_ddl_transfers_sql() (*asset, error) {
	bytes, err := resources_ddl_transfers_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/transfers.sql", size: 412, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_trips_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x41\x4b\xc3\x30\x14\xc7\xef\xfd\x14\xef\x22\xb4\x20\xc2\x60\x82\x20\x3b\x64\xdb\x53\x8b\x6d\x1d\x59\x7a\xd8\xa9\xc9\x9a\x6c\x0d\xba\xb4\x24\xe9\xf0\xe3\xdb\x2a\xb6\xa2\xa2\x63\x90\x43\x48\x7e\xef\xbd\xfc\xf3\x5b\x50\x24\x0c\x81\x91\x79\x82\xc0\xf7\x7e\xe7\x8a\x0b\xc7\xaf\xb8\xb7\xba\x71\x1c\xc2\x00\x80\xdb\xba\xf5\xaa\xd0\x92\xc3\x51\xd8\xb2\x12\x36\x9c\x5e\x47\xb0\xc4\x3b\x92\x27\x0c\xb2\x3c\x49\x2e\x7b\xcc\x29\x7b\xd4\xe5\x07\xa8\x8d\x0f\x27\x93\x5f\xa0\xbe\xef\x8f\x56\xd9\xd3\x77\xa2\x52\x42\x3a\xbd\x37\xff\x8c\x94\xda\xaa\xd2\xeb\xda\xfc\x3d\x74\xfb\x52\x97\xcf\x27\x04\xa8\x44\x73\x42\xce\xd2\x2a\xe1\x95\x2c\x84\xe7\x20\xbb\x9d\xd7\x07\x35\x44\x18\xf0\x45\x4e\x29\x66\xac\x60\x71\x8a\x6b\x46\xd2\xd5\x7b\x6d\xdb\xc8\x73\x6b\x57\x34\x4e\x09\xdd\xc0\x23\x6e\x20\x1c\xfe\x31\xea\xaf\xfa\xa3\xc1\x52\xb7\x5e\x3b\x71\xa3\xb5\x11\x19\x0d\x7d\x42\x5f\x9c\x45\x41\x04\x98\xdd\xc7\x19\xce\x62\x63\xea\xe5\x7c\x7c\xce\x03\xa1\x6b\x64\xb3\xd6\xef\x6e\x0e\xdb\xe9\x6d\xf0\x16\x00\x00\xff\xff\xfe\xb2\x5a\xbe\x35\x02\x00\x00")

func resources_ddl_trips_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_trips_sql,
		"resources/ddl/trips.sql",
	)
}

func resources_ddl_trips_sql() (*asset, error) {
	bytes, err := resources_ddl_trips_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/trips.sql", size: 565, mode: os.FileMode(420), modTime: time.Unix(1419429294, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/ddl/agencies.sql": resources_ddl_agencies_sql,
	"resources/ddl/calendar_dates.sql": resources_ddl_calendar_dates_sql,
	"resources/ddl/calendars.sql": resources_ddl_calendars_sql,
	"resources/ddl/routes.sql": resources_ddl_routes_sql,
	"resources/ddl/stop_times.sql": resources_ddl_stop_times_sql,
	"resources/ddl/stop_times_indexes.sql": resources_ddl_stop_times_indexes_sql,
	"resources/ddl/stops.sql": resources_ddl_stops_sql,
	"resources/ddl/transfers.sql": resources_ddl_transfers_sql,
	"resources/ddl/trips.sql": resources_ddl_trips_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources": &_bintree_t{nil, map[string]*_bintree_t{
		"ddl": &_bintree_t{nil, map[string]*_bintree_t{
			"agencies.sql": &_bintree_t{resources_ddl_agencies_sql, map[string]*_bintree_t{
			}},
			"calendar_dates.sql": &_bintree_t{resources_ddl_calendar_dates_sql, map[string]*_bintree_t{
			}},
			"calendars.sql": &_bintree_t{resources_ddl_calendars_sql, map[string]*_bintree_t{
			}},
			"routes.sql": &_bintree_t{resources_ddl_routes_sql, map[string]*_bintree_t{
			}},
			"stop_times.sql": &_bintree_t{resources_ddl_stop_times_sql, map[string]*_bintree_t{
			}},
			"stop_times_indexes.sql": &_bintree_t{resources_ddl_stop_times_indexes_sql, map[string]*_bintree_t{
			}},
			"stops.sql": &_bintree_t{resources_ddl_stops_sql, map[string]*_bintree_t{
			}},
			"transfers.sql": &_bintree_t{resources_ddl_transfers_sql, map[string]*_bintree_t{
			}},
			"trips.sql": &_bintree_t{resources_ddl_trips_sql, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

