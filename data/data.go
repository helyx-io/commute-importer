package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _resources_ddl_agencies_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\xc1\x4a\xc4\x30\x10\x06\xe0\x7b\x9f\x62\x2e\x42\x0b\x1e\x57\x10\x64\x0f\xd9\xdd\x51\x83\x69\x5c\xb2\xe9\xa1\xa7\x24\x36\xb1\x16\xda\x54\xd2\x54\xd0\xa7\x57\x7b\xa8\x15\x0f\x96\xbd\x25\xf0\xfd\xff\x30\xb3\x17\x48\x24\x82\x24\x3b\x86\xa0\x2f\x06\x65\x6a\xe7\xab\xc6\x0d\x1a\xd2\x04\x40\x4f\xdf\x77\xd5\x58\x0d\x6f\x26\x54\x2f\x26\xa4\x9b\xab\x0c\xf8\xa3\x04\x5e\x30\x76\xb9\x30\xde\x74\xee\xb7\x3a\xe0\x2d\x29\xd8\x5f\x39\x86\x76\x1d\x8c\x4d\xe7\x3e\x7a\xbf\xb2\xb6\x35\xbe\xfe\x47\x56\xc1\x99\xe8\xac\x32\x51\x83\xfd\x7a\x7d\x0f\x98\x97\x99\xf9\xbe\x10\x02\xb9\x54\x92\xe6\x78\x92\x24\x3f\x4e\xd9\xf1\xd5\x9e\x9b\x3d\x0a\x9a\x13\x51\xc2\x03\x96\x90\x2e\x6e\x9a\x25\x19\x20\xbf\xa3\x1c\xb7\xd4\xfb\xfe\xb0\xfb\xa9\xb9\x27\xe2\x84\x72\x3b\xc6\xe7\xeb\xee\x69\x73\x93\x7c\x06\x00\x00\xff\xff\xa3\x94\x93\xdc\xa9\x01\x00\x00")

func resources_ddl_agencies_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_agencies_sql,
		"resources/ddl/agencies.sql",
	)
}

func resources_ddl_agencies_sql() (*asset, error) {
	bytes, err := resources_ddl_agencies_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/agencies.sql", size: 425, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_calendar_dates_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\xc1\x4b\xc3\x30\x14\x87\xef\xfd\x2b\xde\x45\x68\x61\x97\x81\x07\x41\x76\xc8\xb6\xa7\x06\xd3\x38\xb2\xf4\xb0\x53\x12\x93\x27\x04\x5c\x5a\xda\x54\xf4\xbf\xd7\xaa\xd8\x7a\xdd\xe5\x1d\x1e\xdf\xf7\xc1\x6f\xa7\x90\x69\x04\xcd\xb6\x02\xc1\x5e\x0d\xc6\xbb\x57\x4a\xc1\xf5\x26\xb8\x4c\x83\x85\xb2\x00\xb0\x03\xf5\x6f\xd1\x93\x89\xc1\x42\x4c\xb9\x5c\xaf\x2b\x90\x4f\x1a\x64\x23\xc4\x6a\x02\x26\xd8\xc2\x74\xff\xff\xe9\xdd\x53\x97\x63\x9b\x4c\xfe\xe8\x68\x96\xf7\x78\xc7\x1a\xb1\x00\x7d\x4f\x5f\x72\x30\x2e\xff\x64\x72\x3c\xcf\xa9\x3f\x7c\xd7\x28\x85\x52\x1b\xcd\x6b\x3c\x6a\x56\x1f\xbe\xdd\xb1\x0b\x97\xba\x07\xc5\x6b\xa6\x4e\xf0\x88\x27\x28\x97\x33\x57\xbf\x9b\xaa\xa2\x02\x94\xf7\x5c\xe2\x86\xa7\xd4\xee\xb7\x73\xef\x81\xa9\x23\xea\xcd\x98\x5f\x6e\xce\xcf\xd7\xb7\xc5\x67\x00\x00\x00\xff\xff\x76\x9e\x6e\x83\x4b\x01\x00\x00")

func resources_ddl_calendar_dates_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_calendar_dates_sql,
		"resources/ddl/calendar_dates.sql",
	)
}

func resources_ddl_calendar_dates_sql() (*asset, error) {
	bytes, err := resources_ddl_calendar_dates_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/calendar_dates.sql", size: 331, mode: os.FileMode(420), modTime: time.Unix(1419426299, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_calendars_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4d\x4b\xc3\x40\x10\x86\xef\xfd\x15\x73\x11\x12\xf0\x22\x54\x10\xa4\x87\xb4\x5d\x35\x98\xc6\x92\x6e\x0f\x3d\x65\xd7\x64\x4b\x17\xec\x56\xf6\xa3\xda\x7f\x6f\x62\xf6\x0b\x04\x23\x5e\x72\x98\xf7\x99\x85\x77\xf2\x2c\x2a\x94\x61\x04\x38\x9b\x17\x08\xc8\x95\xaa\x1b\xfa\xc6\x44\x4b\xa5\x22\x90\x4c\x00\x88\x62\xf2\xcc\x1b\x56\xf3\x96\xc0\x99\xca\xe6\x40\x65\x32\xbd\x4d\xa1\x7c\xc1\x50\x6e\x8b\xe2\xba\x87\x8e\xa7\x6e\xe5\x42\x40\x73\x71\xe1\x42\x27\x37\x29\x2c\xd1\x43\xb6\x2d\x22\x46\x1b\xa6\x46\xa1\x0f\xd6\x8a\x3f\x60\xfa\x60\xe4\x38\xb5\x97\x7c\x94\x51\x54\x1b\x39\x4e\x99\xf1\x7e\x4a\x53\xa9\xeb\x96\x6a\x46\xa0\xff\xfe\x24\xba\xbb\xfe\x9a\x37\x92\x75\xf3\xb6\xa6\x7a\x20\x34\x3f\x32\x7f\x67\x8f\x2f\xb6\x55\x85\x4a\x5c\xe3\x7c\x85\x36\x38\x5b\xad\xbf\x77\xcd\x7b\xfb\xdf\xdd\x75\x95\xaf\xb2\x6a\x07\xcf\x68\x07\x49\xfc\xbf\xd3\x3e\xed\xa7\x51\xb7\x6e\xfe\x49\x7a\x2c\xb4\x0d\x98\x2b\xe8\x20\x5f\x38\x20\x83\x29\x0e\xb0\xde\x84\xd8\x4a\xe2\x72\xe7\x4c\x00\xbc\x20\x0e\x09\xc6\x44\xaf\x58\x3d\xfc\x33\x4e\x97\x80\x0c\x6e\x38\xc0\x9a\x12\x15\xb6\x5a\xf8\xba\x4e\x93\x08\x31\x71\x13\x6b\x48\x3a\x49\x01\x95\x8f\x79\x89\x66\xb9\x10\xa7\xe5\x3c\x9c\xfe\x29\xab\x36\x08\xcf\x8c\xde\xdf\x1d\x5f\xa7\xf7\x93\xaf\x00\x00\x00\xff\xff\xcf\xa2\x95\x03\x7a\x03\x00\x00")

func resources_ddl_calendars_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_calendars_sql,
		"resources/ddl/calendars.sql",
	)
}

func resources_ddl_calendars_sql() (*asset, error) {
	bytes, err := resources_ddl_calendars_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/calendars.sql", size: 890, mode: os.FileMode(420), modTime: time.Unix(1419425171, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_routes_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd1\xc1\x4b\xfb\x30\x14\xc0\xf1\x7b\xff\x8a\x77\xf9\x41\x0b\xbf\x4b\x65\xc2\x40\x76\xc8\xb6\xa7\x16\xdb\x3a\xb2\xf4\xb0\x53\x12\x93\xb8\x15\xda\x64\xa4\xa9\xb8\xff\xde\x39\x61\x13\x65\x10\xbc\x25\xf0\x79\xdf\x40\xde\x82\x22\x61\x08\x8c\xcc\x4b\x04\xf1\x6f\xe0\xde\x8d\xc1\x0c\x02\xd2\x04\x40\x9c\x2e\xbc\xd5\x02\xde\xa4\x57\x3b\xe9\xd3\xc9\x6d\x06\xf5\x33\x83\xba\x29\xcb\xff\x9f\x44\x6e\x8d\x55\x87\x5f\x66\x89\xf7\xa4\x29\xbf\xb9\xaf\xd4\xb0\x73\x3e\x70\x2b\x7b\x13\xc5\x3b\x67\xb7\x3f\x74\x7e\x33\xbd\xca\xb5\x19\x54\x54\x37\x1c\xf6\xc7\x64\x6b\x43\x9a\xe7\x57\xd1\xe8\xbb\xa8\x98\x72\x9d\xf3\x71\xcf\x9a\xf7\x10\xc5\x95\x37\x32\x18\xcd\x65\x10\xa0\x8f\xa7\xd0\xf6\xe6\xfc\xed\x67\xbe\x68\x28\xc5\x9a\x71\x56\x54\xb8\x66\xa4\x5a\x9d\x66\xc7\xbd\xfe\xeb\xec\x8a\x16\x15\xa1\x1b\x78\xc2\x0d\xa4\x97\xe5\x67\x49\x06\x58\x3f\x14\x35\xce\x0a\x6b\xdd\x72\x7e\xa9\x3c\x12\xba\x46\x36\x1b\xc3\xeb\xb4\x7f\x99\xdc\x25\x1f\x01\x00\x00\xff\xff\xfc\x78\x02\xcd\x4f\x02\x00\x00")

func resources_ddl_routes_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_routes_sql,
		"resources/ddl/routes.sql",
	)
}

func resources_ddl_routes_sql() (*asset, error) {
	bytes, err := resources_ddl_routes_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/routes.sql", size: 591, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stop_times_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\x4f\x4b\xc3\x30\x18\xc6\xef\xfd\x14\xef\x45\x68\xc1\x83\xd3\x1d\x06\xb2\x43\xb6\x45\x2d\x74\x51\xba\xf4\x9c\xc4\x26\x75\x41\x97\xc6\xfc\x19\xf8\xed\xed\x02\xba\x21\x5a\x61\x97\x97\xf7\xf0\x7b\x7e\x0f\xcf\xb2\xc6\x88\x62\xa0\x68\x51\x61\xe0\x17\x9e\xf9\xd0\x5b\x16\xf4\x4e\x79\x0e\x79\x06\xc0\x83\xd3\x96\x69\xc9\x61\x2f\x5c\xbb\x15\x2e\x9f\x5e\x15\x40\x1e\x29\x90\xa6\xaa\x2e\x0f\x84\x70\x4e\xef\xc5\x5b\x4a\x71\x38\x5c\x58\xe1\x3b\xd4\x54\x27\x8c\x54\x56\xb8\x10\x9d\x1a\xa5\x52\xf9\x69\xd7\xcd\xf5\x8f\xae\x44\x78\xf5\x1e\x95\x69\x07\x8d\x36\x21\x9f\x4c\x8a\x3f\x4c\x5b\x25\x24\xf3\xfa\xc5\x1c\x85\xb3\x5f\x58\xab\xdb\xd7\x38\x8c\xfe\xb0\x63\x46\xe9\x06\x63\xdf\x75\xff\x71\xad\x53\x22\x28\xc9\x44\xe0\x20\x87\x2f\x2d\xfd\xda\xf0\x8d\x2f\x9b\xba\xc6\x84\x32\x5a\xae\xf1\x86\xa2\xf5\x53\xca\x46\x2b\xcf\xc9\x66\x05\x60\x72\x5f\x12\x3c\x2f\x8d\xe9\x57\x8b\x23\xf9\x80\xea\x0d\xa6\xf3\x18\xba\xd9\xee\x79\x7a\x9b\x7d\x06\x00\x00\xff\xff\x13\x41\x4f\xb1\xef\x01\x00\x00")

func resources_ddl_stop_times_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stop_times_sql,
		"resources/ddl/stop_times.sql",
	)
}

func resources_ddl_stop_times_sql() (*asset, error) {
	bytes, err := resources_ddl_stop_times_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stop_times.sql", size: 495, mode: os.FileMode(420), modTime: time.Unix(1419419776, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stop_times_indexes_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x50\x2d\x8e\x2f\x2e\xc9\x2f\x88\x2f\xc9\xcc\x4d\x2d\x4e\x50\x70\x74\x71\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\x54\xd0\x48\x28\x29\xca\x2c\x88\xcf\x4c\x49\xd0\x51\x48\x00\x2b\x04\x32\x35\xad\xb9\x00\x01\x00\x00\xff\xff\x8a\x52\xba\xcb\x44\x00\x00\x00")

func resources_ddl_stop_times_indexes_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stop_times_indexes_sql,
		"resources/ddl/stop_times_indexes.sql",
	)
}

func resources_ddl_stop_times_indexes_sql() (*asset, error) {
	bytes, err := resources_ddl_stop_times_indexes_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stop_times_indexes.sql", size: 68, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_stops_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd2\xcf\x4b\xc3\x30\x14\x07\xf0\x7b\xff\x8a\x77\x11\x5a\xf0\x52\xa9\x32\x90\x1d\xb2\xed\xa9\xc5\xb6\x8e\x2c\x3d\xec\xd4\xc4\x24\x62\xa1\x4d\x4a\x9a\x0a\xfa\xd7\xbb\xed\xd0\xf9\xab\x1b\x78\x7b\x87\xcf\xfb\x86\x6f\x92\x25\x45\xc2\x10\x18\x59\x64\x08\xfc\xa2\xaf\x7a\x6f\xbb\x9e\x43\x18\x00\xf0\xfd\x5c\xd5\x8a\xc3\x9b\x70\xf2\x55\xb8\x30\xb9\x8e\xa0\x78\x62\x50\x94\x59\x76\x39\x0a\x69\x95\xfe\x6e\x56\x78\x47\xca\xec\xa7\x33\xa2\xfd\xe2\x6e\x92\x29\xa7\x74\x2f\x8f\x2e\xbe\x9a\x4d\xc1\x46\x78\x0e\xb5\xf1\x61\x1c\x4f\x12\x6b\x4e\x90\x0f\x6b\xf4\xaf\x82\x7f\x07\x0d\xae\x39\xc3\x1a\x2b\x85\xaf\xad\xa9\xfc\x7b\xa7\x4f\x1c\xda\x09\xa7\x8d\xdf\x5d\xf4\x41\x9f\x09\x95\x4e\x0b\xaf\x55\xb5\x6f\xaa\x76\x93\xaf\x5b\x3d\x3e\xc1\xc8\x97\x25\xa5\x58\xb0\x8a\xa5\x39\x6e\x18\xc9\xd7\x87\xdd\xa1\x53\xff\xdd\x5d\xd3\x34\x27\x74\x0b\x8f\xb8\x85\x70\xfc\x07\x51\x10\x01\x16\xf7\x69\x81\xf3\xd4\x18\xbb\x5a\x1c\x43\x1e\x08\xdd\x20\x9b\x0f\xfe\x65\xd6\x3e\x27\xb7\xc1\x67\x00\x00\x00\xff\xff\x0e\x49\x11\xd5\x58\x02\x00\x00")

func resources_ddl_stops_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_stops_sql,
		"resources/ddl/stops.sql",
	)
}

func resources_ddl_stops_sql() (*asset, error) {
	bytes, err := resources_ddl_stops_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/stops.sql", size: 600, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_transfers_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\x4f\x4b\x03\x31\x10\x47\xef\xfb\x29\xe6\x22\xcd\xc2\x1e\x2c\x54\x10\xa4\x87\xb4\x1d\x75\x71\x4d\x65\x4d\x91\x9e\x92\xd8\xcd\x62\x0e\x49\x96\x64\x2a\xf8\xed\xc5\x7f\xdd\x2a\x1e\xf4\xfe\xde\x4b\xe6\xb7\x6c\x91\x4b\x04\xc9\x17\x0d\x82\x3e\xc9\x8a\x92\x09\xb9\xb7\x29\x6b\x60\x05\x80\xee\x53\xf4\x2a\x53\x1c\x94\xeb\x34\x3c\x9b\xb4\x7b\x32\x89\xcd\xce\x4a\x10\x6b\x09\x62\xd3\x34\xd5\x1b\x46\xf1\x2f\xd0\x67\x5b\xd1\xcb\x60\x35\xb8\x40\x6c\x3a\x1d\x19\x58\xe1\x25\xdf\x34\x12\x26\xa7\x93\x77\xde\xbb\xa0\x46\xc7\xf9\x23\xe7\x0b\x3d\xb4\x77\xc9\x1a\xb2\x9d\x32\xf4\xfb\x07\xc6\xb8\x58\x3f\xb0\xf2\xe3\x81\xfd\xd0\xfd\x5b\xba\x6b\xeb\x5b\xde\x6e\xe1\x06\xb7\xc0\xbe\xcf\x53\x1d\xcf\x50\xfd\x38\xb7\x2c\x4a\x40\x71\x55\x0b\x9c\xd7\x21\xc4\xd5\xe2\x10\x5f\x5e\xf3\xf6\x1e\xe5\x7c\x4f\xfd\xb9\x7f\x9c\x5d\x14\xaf\x01\x00\x00\xff\xff\xc3\x12\xdc\xc7\x95\x01\x00\x00")

func resources_ddl_transfers_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_transfers_sql,
		"resources/ddl/transfers.sql",
	)
}

func resources_ddl_transfers_sql() (*asset, error) {
	bytes, err := resources_ddl_transfers_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/transfers.sql", size: 405, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resources_ddl_trips_sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x41\x4b\xc3\x30\x14\xc7\xef\xfd\x14\xef\x22\xb4\xe0\x65\x30\x41\x90\x1d\xb2\xed\xa9\xc5\x36\x8e\x2c\x3d\xec\xd4\x64\x49\xb4\x41\x97\x96\x34\x1d\x7e\x7c\x5b\xc5\x56\x54\x74\x08\x39\x84\xe4\xf7\xde\xcb\x3f\xbf\x15\x43\xc2\x11\x38\x59\x66\x08\xe2\xac\x2d\x83\xb7\x4d\x2b\x20\x8e\x00\x84\xaf\xbb\x60\x4a\xab\x05\x1c\xa5\x57\x95\xf4\xf1\xfc\x22\x81\x35\x5e\x93\x22\xe3\x40\x8b\x2c\x3b\x1f\xb0\xd6\xf8\xa3\x55\xef\xa0\x75\x21\x9e\xcd\x7e\x80\x86\xbe\xdf\x5a\xd1\xfb\xaf\x44\x65\xa4\x6e\xed\xa3\xfb\x63\xa4\xb6\xde\xa8\x60\x6b\xf7\xfb\xd0\xfd\x73\xad\x9e\x4e\x08\x50\xc9\xe6\x84\x9c\xca\x1b\x19\x8c\x2e\x65\x10\xa0\xfb\x5d\xb0\x07\x33\x46\x18\xf1\x55\xc1\x18\x52\x5e\xf2\x34\xc7\x2d\x27\xf9\xe6\xad\xb6\x6b\xf4\x7f\x6b\x37\x2c\xcd\x09\xdb\xc1\x1d\xee\x20\x1e\xff\x31\x19\xae\x86\xa3\xd1\x52\xbf\x5e\x7a\x71\x93\xb5\x09\x99\x0c\x7d\x40\x9f\x9c\x25\x51\x02\x48\x6f\x52\x8a\x8b\xd4\xb9\x7a\xbd\x9c\x9e\x73\x4b\xd8\x16\xf9\xa2\x0b\x0f\x97\x87\xfd\xfc\x2a\x7a\x0d\x00\x00\xff\xff\xd7\x16\xbb\x44\x2e\x02\x00\x00")

func resources_ddl_trips_sql_bytes() ([]byte, error) {
	return bindata_read(
		_resources_ddl_trips_sql,
		"resources/ddl/trips.sql",
	)
}

func resources_ddl_trips_sql() (*asset, error) {
	bytes, err := resources_ddl_trips_sql_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resources/ddl/trips.sql", size: 558, mode: os.FileMode(420), modTime: time.Unix(1419423378, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/ddl/agencies.sql": resources_ddl_agencies_sql,
	"resources/ddl/calendar_dates.sql": resources_ddl_calendar_dates_sql,
	"resources/ddl/calendars.sql": resources_ddl_calendars_sql,
	"resources/ddl/routes.sql": resources_ddl_routes_sql,
	"resources/ddl/stop_times.sql": resources_ddl_stop_times_sql,
	"resources/ddl/stop_times_indexes.sql": resources_ddl_stop_times_indexes_sql,
	"resources/ddl/stops.sql": resources_ddl_stops_sql,
	"resources/ddl/transfers.sql": resources_ddl_transfers_sql,
	"resources/ddl/trips.sql": resources_ddl_trips_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources": &_bintree_t{nil, map[string]*_bintree_t{
		"ddl": &_bintree_t{nil, map[string]*_bintree_t{
			"agencies.sql": &_bintree_t{resources_ddl_agencies_sql, map[string]*_bintree_t{
			}},
			"calendar_dates.sql": &_bintree_t{resources_ddl_calendar_dates_sql, map[string]*_bintree_t{
			}},
			"calendars.sql": &_bintree_t{resources_ddl_calendars_sql, map[string]*_bintree_t{
			}},
			"routes.sql": &_bintree_t{resources_ddl_routes_sql, map[string]*_bintree_t{
			}},
			"stop_times.sql": &_bintree_t{resources_ddl_stop_times_sql, map[string]*_bintree_t{
			}},
			"stop_times_indexes.sql": &_bintree_t{resources_ddl_stop_times_indexes_sql, map[string]*_bintree_t{
			}},
			"stops.sql": &_bintree_t{resources_ddl_stops_sql, map[string]*_bintree_t{
			}},
			"transfers.sql": &_bintree_t{resources_ddl_transfers_sql, map[string]*_bintree_t{
			}},
			"trips.sql": &_bintree_t{resources_ddl_trips_sql, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

